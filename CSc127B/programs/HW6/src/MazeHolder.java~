public class MazeHolder {
  public static void main(String args[]) {// Change this eventually lol
    ArrayStack stack = new ArrayStack();// holds values of larger maze
    int r = 3;
    int c = 4;
    int posx = 0;
    int posy = 0;
    int x = 2 * r + 1;
    int y = 2 * c + 1;
    String[][] maze = new String[x][y];
    posx = (int) (Math.random() * x);
    posy = (int) (Math.random() * y);
    Location start = new Location(posx, posy);
    stack.itemPush(start);
    
    maze[posx][posy] = "#";
    
    int direction = 0;
    
    while (!stack.isEmpty()) {
    
      boolean up = false;
      boolean down = false;
      boolean left = false;
      boolean right = false;
      
      Location l = stack.topPeek();
      
      posx = l.getRow();
      posy = l.getColumn();
      
      if (!(l.getRow() < 3))
        up = true;
      if (!(l.getRow() > x - 3))
        down = true;
      if (!(l.getColumn() < 3))
        left = true;
      if (!(l.getColumn() > y - 3))
        right = true;
      
      boolean noGo = false;
      
      if (!up && !down && !left && !right) {
        noGo = true;
      }
      
      // if it can go in a direction
      while (!noGo) {
        direction = (int) Math.random() * 4;
                  System.out.println(direction);
        if (direction == 0 && up) {
          if (maze[posx - 2][posy] == "#") {
            noGo = true;
            continue;
          }
          Location newl = new Location(posx + 2, posy);
          stack.itemPush(newl);
          maze[posx - 1][posy] = "#";
          maze[posx - 2][posy] = "#";
          break;
        }
        else if (direction == 1 && down) {
          if (maze[posx - 2][posy] == "#") {
            noGo = true;
            continue;
          }
          Location newl = new Location(posx - 2, posy);
          stack.itemPush(newl);
          maze[posx + 1][posy] = "#";
          maze[posx + 2][posy] = "#";
          break;
        } 
        else if (direction == 2 && left) {
          if (maze[posx][posy - 2] == "#") {
            noGo = true;
            continue;
          }
          Location newl = new Location(posx, posy - 2);
          stack.itemPush(newl);
          maze[posx][posy - 1] = "#";
          maze[posx][posy - 2] = "#";
          break;
        } 
        else if (direction == 3 && right) {
          if (maze[posx][posy + 2] == "#") {
            noGo = true;
            continue;
          }
          Location newl = new Location(posx, posy + 2);
          stack.itemPush(newl);
          maze[posx][posy + 1] = "#";
          maze[posx][posy + 2] = "#";
          break;
        } 
        else {
          continue;
        }
      } // end pick while
      
      if (noGo) {
        stack.itemPop();
      }
      
    } // end empty while
    
    int entrance = (int) (Math.random() * x);
    int exit = (int) (Math.random() * x);
    
    maze[0][entrance] = "#";
    maze[x-1][exit] = "#";
    
    for (int i = 0; i < x; i++) {
      for (int j = 0; j < y; j++) {
        System.out.print(maze[i][j]);
      }
      System.out.println();
    }
    System.out.println("flag");
  }
  
}
