/**********************************************************************
  * class BinaryNumberTest
  * equals doesn't work if number2 length is greater than number1
  **********************************************************************/
import java.nio.*;

public class Program3{
  
  public static void main(String[] args){
    //This variable will keep track of the number of test cases
    //your program passed
    int passed = 0;
    //Here are all of the test cases! Each test case returns the
    //number 1 if you pass the test in order to increment the 
    //counter variable.
   passed += test1();
    passed += test2();
    passed += test3();
    passed += test4();
    passed += test5();
    passed += test6();
    //passed += test7();
    //   passed += test8();
    // passed += test9();
    //passed += test10();
    passed += test11();
    passed += test12();
    passed += test13();
    passed += test14();
    passed += test15();
    passed += test16();
    passed += test17();
    passed += test18();
    passed += test19();
    passed += test20();
    System.out.println(passed+"/15 tests passed.");
    if (passed == 15)
      System.out.println("Great job!");
    else
      System.out.println("Good work so far, but it looks like BinaryNumber could use some more work.");
  }//end main
  
  /**********************************************************************
    * testing methods
    * 
    * All of these test methods follow a consistent pattern. If your program
    * passes the test, then the method will return the number one. If your
    * program fails the test, then the method wil print a helpful error 
    * message and return the number 0.
    **********************************************************************/
  
  /*
   *Can your program successfully create a BinaryNumber object and
   * return a correctly formatted string?
   */
  public static int test1(){
    BinaryNumber test = new BinaryNumber("0011010");
    
    if (!test.toString().equals("0011010")){
      System.out.println("Test 1 failed.\n\tExpected '0011010', but received "+test.toString());
      return 0;
    }//end if
    else
      System.out.println("Test 1 passed");
    return 1;
  }//end method
  
  /*
   *Can your program successfully create a BinaryNumber object
   * when the day field is too big to be valid?
   */
  
  public static int test2(){
    try{
      BinaryNumber test = new BinaryNumber("01012");
    }
    catch (IllegalArgumentException e){
      System.out.println("Test 2 passed");
      return 1;
    }
    return 0;
  }//end method
  
  /*
   *Can your program successfully create a BinaryNumber object
   * when the day field is too small to be valid?
   */
  public static int test3(){
    BinaryNumber test = new BinaryNumber("1");
    
    if (!test.toString().equals("0001")){
      System.out.println("Test 3 failed.\n\tExpected '0001', but received "+test.toString());
      return 0;
    }//end if
    else
      System.out.println("Test 3 passed");
    return 1;
  }//end method
  
  /*
   *Can your program successfully create a BinaryNumber object
   * when the month field is too big to be valid?
   */
  public static int test4(){
    BinaryNumber test = new BinaryNumber("11");
    
    if (!test.toString().equalsIgnoreCase("0011")){
      System.out.println("Test 4 failed.\n\tExpected '0011', but received "+test.toString());
      return 0;
    }//end if
    else
      System.out.println("Test 4 passed");
    return 1;
  }//end method
  
  /*
   *Can your program successfully create a BinaryNumber object
   * when the month field is too small to be valid?
   */
  public static int test5(){
    BinaryNumber test = new BinaryNumber("111");
    
    if (!test.toString().equalsIgnoreCase("0111")){
      System.out.println("Test 5 failed.\n\tExpected '0111', but received "+test.toString());
      return 0;
    }//end if
    else
      System.out.println("Test 5 passed");
    return 1;
  }//end method
  
  public static int test6(){
    try {
      BinaryNumber test = new BinaryNumber("0111");
      test.setValue("00111");
    }
    catch(IllegalArgumentException e) {
      System.out.println("Test 6 passed");
      return 1; 
    }//end catch
    System.out.println("Test 6 did not pass");
    return 0;
  }//end method
  
  /*
   *Can your program successfully create a BinaryNumber object
   * when the year field is too small to be valid?
   *//*
   public static int test6(){
   BinaryNumber test = new BinaryNumber(1700, 12, 15);
   
   if (!test.toString().equalsIgnoreCase("January 1, 1753")){
   System.out.println("Test 6 failed.\n\tExpected 'January 1, 1753', but received "+test.toString());
   return 0;
   }//end if
   else
   return 1;
   }//end method
   */
  /*
   *Can your program successfully create a BinaryNumber object
   * when the month is February, the day is 30, and it's a
   * leap year?
   */
  /*
   public static int test7(){
   BinaryNumber test = new BinaryNumber(2000, 2, 30);
   
   if (!test.toString().equalsIgnoreCase("February 29, 2000")){
   System.out.println("Test 7 failed.\n\tExpected 'February 29, 2000', but received "+test.toString());
   return 0;
   }//end if
   else
   return 1;
   }//end method
   
   /*
   *Do all of your getters work correctly?
   */
  /*
   public static int test8(){
   BinaryNumber test = new BinaryNumber(1775, 4, 19);
   
   if (test.getYear()!=1775 || test.getMonth()!=4 || test.getDay()!=19){
   System.out.println("Test 8 failed.\n\tExpected year=1775, month=4, day=19, but year="+ test.getYear() +
   ", month=" + test.getMonth() + ", day=" + test.getDay());
   return 0;
   }//end if
   else
   return 1;
   }//end method
   
   /*
   *Does your getMonthAsString() method work correctly
   * for the month of December?
   *//*
   public static int test9(){
   BinaryNumber test = new BinaryNumber(2001, 12, 30);
   String monthName = "December";
   
   if (!test.getMonthAsString().equalsIgnoreCase(monthName)){
   System.out.println("Test 9 failed.\n\tExpected " + monthName +", but received "+test.getMonthAsString()+".");
   return 0;
   }//end if
   else
   return 1;
   }//end method
   
   /*
   *Does your setDate() method work correctly?
   */
  /*
   public static int test10(){
   BinaryNumber test = new BinaryNumber(1863, 11, 19);
   test.setDate(1991, 5, 30);
   
   if (!test.toString().equalsIgnoreCase("May 30, 1991")){
   System.out.println("Test 7 failed.\n\tExpected 'May 30, 1991', but received "+test.toString());
   return 0;
   }//end if
   else
   return 1;
   }//end method
   
   /*
   equals method
   */
  public static int test11(){
    BinaryNumber number1 = new BinaryNumber("01010");
    BinaryNumber number2 = new BinaryNumber("01010");
    if (!(number1.equals(number2))){
      System.out.println("Test 11 failed.\n\tThe two dates should have been identical \t"+number1+"\t"+number2);
      return 0;
    }//end if
    else
      System.out.println("Test 11 passed");
    return 1;
  }//end method
  
  /*
   Increment by
   */
  
  public static int test12(){
    BinaryNumber number1 = new BinaryNumber("0011");
    number1.incrementBy("0011");
    if (number1.toString().equals("0110")){
      System.out.println("Test 12 passed ");
      return 1;
    }//end if
    else {
      System.out.println("Test 12 failed.\n\tAnswer recieved = "+number1);
      return 0;
    }
  }//end method
  
  public static int test13(){
    try {
      BinaryNumber number1 = new BinaryNumber("0011");
      number1.incrementBy("000000010");
    }
    catch (BufferOverflowException e) {
      System.out.println("Test 13 passed");
      return 1;
    }
    return 0;
  }//end method
  
  public static int test14(){
    BinaryNumber number1 = new BinaryNumber("0101");
    number1.decrementBy("0010");
    if (number1.toString().equals("0011")){
      System.out.println("Test 14 passed");
      return 1;
    }//end if
    else {
      System.out.println("Test 14 failed.\n\tAnswer recieved = "+number1);
      return 0;
    }
  }//end method
  
  public static int test15(){
    try {
      BinaryNumber number1 = new BinaryNumber("0011");
      number1.decrementBy("000000010");
    }
    catch (BufferOverflowException e) {
      System.out.println("Test 15 passed");
      return 1;
    }
    return 0;
  }//end method
  
  public static int test16(){
    try{
      BinaryNumber number1 = new BinaryNumber("0110");
      number1.incrementBy("0011");
    }
    catch (ArithmeticException e) {
      System.out.println("Test 16 passed");
      return 1;
    }
    return 0;
  }//end method
  
  public static int test17(){
    try{
      BinaryNumber number1 = new BinaryNumber("1010");
      number1.incrementBy("1101");
    }
    catch (ArithmeticException e) {
      System.out.println("Test 17 passed");
      return 1;
    }
    return 0;
  }
  
  public static int test18(){
    BinaryNumber number1 = new BinaryNumber("0100");
    number1.decrementBy("0010");
    if (number1.toString().equals("0010")){
      System.out.println("Test 18 passed ");
      return 1;
    }//end if
    else {
      System.out.println("Test 18 failed.\n\tAnswer recieved = "+number1);
      return 0;
    }
  }//end method
  
  public static int test19(){
    try{
      BinaryNumber number1 = new BinaryNumber("1001");
      number1.decrementBy("1011");
    }
    catch (ArithmeticException e) {
      System.out.println("Test 19 passed");
      return 1;
    }
    return 0;
  }//end method
  
  public static int test20(){
    try{
      BinaryNumber number1 = new BinaryNumber("0111");
      number1.decrementBy("1011");
    }
    catch (ArithmeticException e) {
      System.out.println("Test 20 passed");
      return 1;
    }
    return 0;
  }//end method
}//end BinaryNumberTest