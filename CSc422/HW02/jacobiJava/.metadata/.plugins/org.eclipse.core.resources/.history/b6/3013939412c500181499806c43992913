package jacobi;

import java.util.concurrent.Semaphore;

public class jacobi {

	   /* used for timing */   
	final long startTime = System.currentTimeMillis();

	int size;
	int n;
	int numThreads;
	float left;
	float top;
	float right;
	float bottom;
	float epsilon;
	float[] grid;
	float[] newGrid;
	int[] iterations;
	Semaphore[][] stageArr = new Semaphore[5][32];
	int stages;
	int exitThreadNumber;
	float maxDiffArr[32];
	
	private class endpoints {
		public int low;
		public int hi;
	}
	
	endpoints[] arrayPointer;
	


	void *jacobiWorker( void *arg ) 
	{
		long tmp = (long) arg;
		int i = tmp;
		jacobi(grid,new,arrayPointer[i+1].low, arrayPointer[i+1].hi, i);
		return NULL;
	} /* Worker */

	void swapGrids(float[] grid1, float[] grid2) {
		for (int i = 0; i < grid1.length; i++) {
			float temp = grid1[i];
			grid1[i] = grid2[i];
			grid2[i] = temp;
		}
	}

	void jacobi(float* grid, float* new, int lo, int hi, int threadNum) {
		while (1) {
			
			int i, j;
			iterations[threadNum]++;
			if (iterations[threadNum] >= 7000)
			{
				fprintf(stderr,"Reached max amount of iterations, exiting\n");
				exit(1);
			}
			
			// compute values for all interior points
			for (i = lo; i <= hi ; i++)
			{
				for (j = 1; j <= size; j++) 
				{
					*(new + i*n + j) = (*(grid + (i-1)*n + j) + *(grid + (i+1)*n + j) + *(grid + i*n + (j-1)) + *(grid + i*n + (j+1))) * .25;
				}
			}
			
			//barrier after updating values
			for (i = 0; i < stages; i++) {	
				int power = (int) pow(2,i);
				// V op on other thread
				int result = sem_post(stageArr[i][(power+threadNum)%(numThreads)]);
				if ( result != 0 ) {
					fprintf(stderr, "post failed, yikes\n");
					exit(1);
				}
				
				// P op on self
				result = sem_wait(stageArr[i][threadNum]);
				if ( result != 0 ) {
					fprintf(stderr, "wait failed, yikes\n");
					exit(1);
				}
			}
			
			float maxDiff = 0;
			for (i = lo; i <= hi ; i++)
	        {
	            for (j = 1; j <= size; j++)
	            {
					maxDiff = fmaxf(maxDiff, fabs(*(new + i*n + j) - *(grid + i*n + j)));
				}
			}
			maxDiffArr[threadNum] = maxDiff;		
			
			//barrier after max diff
			for (i = 0; i < stages; i++) {	
				int power = (int) pow(2,i);
				// V op on other thread
				int result = sem_post(stageArr[i][(power+threadNum)%(numThreads)]);
				if ( result != 0 ) {
					fprintf(stderr, "post failed, yikes\n");
					exit(1);
				}
				
				// P op on self
				result = sem_wait(stageArr[i][threadNum]);
				if ( result != 0 ) {
					fprintf(stderr, "wait failed, yikes\n");
					exit(1);
				}
			}
			
			for (i = 0; i < numThreads; i++)
			{
				if (maxDiffArr[i] < epsilon) 
				{
					return;
				}
			}
			
			if (threadNum == 0) {
				swapGrids(&new,&grid);
			}
			
			
			//barrier after swap
			for (i = 0; i < stages; i++) {	
				int power = (int) pow(2,i);
				// V op on other thread
				int result = sem_post(stageArr[i][(power+threadNum)%(numThreads)]);
				if ( result != 0 ) {
					fprintf(stderr, "post failed, yikes\n");
					exit(1);
				}
				
				// P op on self
				result = sem_wait(stageArr[i][threadNum]);
				if ( result != 0 ) {
					fprintf(stderr, "wait failed, yikes\n");
					exit(1);
				}
			}
		}
	}



	public static void main(String[] args) {
		if (argc == 3)
		{
			size = atoi(argv[1]);
	        n = size + 2;
	        numThreads = atoi(argv[2]);
	        left = 10;
	        top = 10;
	        right = 800;
	        bottom = 800;
	        epsilon = .1;
		} else if (argc == 8)
		{
		    size = atoi(argv[1]);
	        n = size + 2;
	        numThreads = atoi(argv[2]);
	        left = atof(argv[3]);
	        top = atof(argv[4]);
	        right = atof(argv[5]);
	        bottom = atof(argv[6]);
	        epsilon = atof(argv[7]);
		} else
		{
			fprintf(stderr,"Incorrect number of arguments, please try again\n");
			return 1;
		}
		
		int i, j, x, y;

		// set endpoints arr
		struct endpoints endpointArray[numThreads+1];
		arrayPointer = endpointArray;
		endpointArray[0].low = 0;
		endpointArray[0].hi = 0;
		if (size%numThreads == 0)
		{
			int incrementer = size/numThreads;
			int startPoint = 1;
			for (i = 1; i <= numThreads; i++) 
			{
				endpointArray[i].low=startPoint;
				endpointArray[i].hi=startPoint+incrementer - 1;
				startPoint += incrementer;
			}
		} else
		{
			float comparator = (float)(size%numThreads)/(float)numThreads;
			int incrementer = size/numThreads;
			if (comparator > .5)
				incrementer++;
			int startPoint = 1;
			for (i = 1; i <= numThreads - 1; i++) 
			{
				endpointArray[i].low=startPoint;
				endpointArray[i].hi=startPoint+incrementer - 1;
				startPoint += incrementer;
			}
			endpointArray[numThreads].low = startPoint;
			endpointArray[numThreads].hi = size;
		}
		
		grid = (float*) calloc(n*n,sizeof(float));
		new = (float*) calloc(n*n,sizeof(float));
		iterations = (int*) calloc(numThreads,sizeof(int));
		
		// set boundaries of grid
		for (x = 1; x <= size; x++)
		{
			*(grid + x) = top;
			*(grid + x*n) = left;
			*(grid + (x+1)*n - 1) = right;
			*(grid + n*(n-1) + x) = bottom;
		}
		
		// set boundaries of new grid
		for (x = 1; x <= size; x++)
		{
			*(new + x) =  *(grid + x);
			*(new + x*n) =  *(grid + x*n);
			*(new + (x+1)*n - 1) =  *(grid + (x+1)*n - 1);
			*(new + n*(n-1) + x) = *(grid + n*(n-1) + x);
	    }
		
		stages = (int) ceil(log10(numThreads)/log10(2));
		
		// init semaphores
		for (x = 0; x < stages; x++) {
			for (y = 0; y < numThreads; y++) {
				char buf[12];
				sprintf(buf, "sem: %d %d", x,y);
				stageArr[x][y] = sem_open(buf, O_CREAT, 0700, 1);
				if ( stageArr[x][y] == SEM_FAILED ) {
					fprintf(stderr, "sem_open failed for %d\n",x);
					exit(1);
				}
			}
		}
		
		pthread_t workerid[numThreads];
		pthread_attr_t attr;
		pthread_attr_init( &attr );
		pthread_attr_setscope( &attr, PTHREAD_SCOPE_SYSTEM );
			
		gettimeofday(&startTime, NULL);
		
		// make threads
		for (i = 0; i < numThreads; i++) {
			long tmp = i;
			pthread_create( &workerid[i], &attr, jacobiWorker, (void *) tmp );
			//printf("main: created thread %ld\n", workerid[i]);	
		}

		// join threads
		for (i = 0; i < numThreads; i++) {
			pthread_join(workerid[i], NULL);
		}
		
		gettimeofday(&endTime, NULL);      
		seconds = endTime.tv_sec  - startTime.tv_sec;
		micros  = endTime.tv_usec - startTime.tv_usec;
		if ( endTime.tv_usec < startTime.tv_usec ) {
			micros += 1000000;    // one million
			seconds--;
		}
		printf("runtime: %d seconds, %d microseconds\n",seconds, micros);
		
		// close and unlink semaphores
		for (x = 0; x < stages; x++) {
			for (y = 0; y < numThreads; y++) {
				char buf[12];
				sprintf(buf, "sem: %d %d", x,y);
				if (sem_close(stageArr[x][y]) != 0) {
					fprintf(stderr, "could not close sem %d %d\n",x,y);
					exit(1);
				}
			
				if (sem_unlink(buf) != 0) {
					fprintf(stderr, "could not unlink sem %d %d\n",x,y);
					exit(1);
				}
			}
		}
		
		// print info and write to file
		printf("numProcs: %d\n",numThreads);
		
		for (i = 0; i < numThreads; i++) {
			printf("Iterations: %d\n",iterations[i]);
		}
		
		FILE *fptr;
		fptr = fopen("selfJacobiResults.txt", "w");
		if (fptr == NULL)
	    	{
	        printf("File does not exists \n");
	        	return 1;
	    	}

		fprintf(fptr,"Grid: %d x %d\n",size,size);
		fprintf(fptr,"Number of processes: %d\n",numThreads);
		fprintf(fptr,"Left: %f\n",left);
		fprintf(fptr,"Top: %f\n",top);
		fprintf(fptr,"Right: %f\n",right);
		fprintf(fptr,"Bottom: %f\n",bottom);
		fprintf(fptr,"Epsilon: %f\n",epsilon);
		fprintf(fptr,"Runtime: %d seconds, %d microseconds\n",seconds, micros);
		for (i = 0; i < numThreads; i++) {
			fprintf(fptr,"Iterations: %d\n",iterations[i]);
		}
		
		for (i = 0; i < n ; i++)
	    {
			for (j = 0; j < n; j++)
	        {
	            fprintf(fptr,"%0.4f ",*(grid + i*n + j));
	        }
			fprintf(fptr,"\n");
	    }
		fclose(fptr);
		return 0;

	}

}
